From 501c3ba451f26c6dba086d0b6c90ce1b839425d8 Mon Sep 17 00:00:00 2001
From: katty87 <esenenkova@gmail.com>
Date: Sat, 21 Nov 2020 17:14:11 +0300
Subject: [PATCH] load_otus

---
 Include/opcode.h        |  3 +++
 Lib/opcode.py           |  2 ++
 Python/ceval.c          | 18 ++++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       |  9 +++++++++
 5 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..a799f86ea7 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -160,6 +160,9 @@ extern "C" {
 #define MAP_ADD         147
 
 
+#define LOAD_OTUS       148
+
+
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
 
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..b927734a04 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -189,4 +189,6 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_OTUS', 148)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..e2869096a3 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1222,6 +1222,24 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             FAST_DISPATCH();
         }
 
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+
+                x = GETITEM(consts, oparg);
+                Py_INCREF(x);
+                PUSH(x);
+                FAST_DISPATCH();
+            }
+            format_exc_check_arg(PyExc_UnboundLocalError,
+                UNBOUNDLOCAL_ERROR_MSG,
+                PyTuple_GetItem(co->co_varnames, oparg));
+            break;
+        }
+
         TARGET(LOAD_FAST)
         {
             x = GETLOCAL(oparg);
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..8c29b98960 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..7fcb945510 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -425,6 +425,15 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = 0;
                 break;
 
+            case LOAD_FAST:
+                j = GETARG(codestr, i);
+
+                if ( (codestr[i+3] == LOAD_CONST) && (j == 0) ) {
+                    codestr[i+3] = LOAD_OTUS;
+                    memset(codestr+i, NOP, 3);
+                }
+                break;
+
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
-- 
2.13.1

